import math

def sqrt(x):
    """
    Compute the positive square root of a real number between 0.0 and 2.5 using Taylor series.

    Parameters
    ----------
    x : float
        Input value between 0.0 and 2.5

    Returns
    -------
    y : float
        Square root of x
    """
    if x < 0.0 or x > 2.5:
        raise ValueError("Input x must be between 0.0 and 2.5")

    base_points = [0.5, 1.0, 1.5, 2.0]
    a = min(base_points, key=lambda bp: abs(x - bp))
    a_sqrt = a ** 0.5
    dx = x - a

    y = a_sqrt
    term = dx
    factorial = 1
    power = dx
    for k in range(1, 20):
        factorial *= k
        coeff = 1.0
        for j in range(k):
            coeff *= (0.5 - j)
        denom = factorial * (a_sqrt ** (2 * k - 1))
        delta = coeff * power / denom
        y += delta
        power *= dx
        if abs(delta) < 1e-8:
            break

    return y


def arcsin(x):
    """
    Compute arcsin(x) using the Borwein & Chamberland series.

    Parameters
    ----------
    x : float
        Input value between 0.0 and 1.0

    Returns
    -------
    y : float
        arcsin(x) in radians
    """
    if x < 0.0 or x > 1.0:
        raise ValueError("Input x must be between 0.0 and 1.0")

    y = 0.0
    for n in range(50):
        numerator = math.factorial(2 * n)
        denominator = (4 ** n) * (math.factorial(n) ** 2) * (2 * n + 1)
        term = (numerator / denominator) * (x ** (2 * n + 1))
        y += term
        if abs(term) < 1e-8:
            break

    return y


def compute_launch_angle(ve_v0, alpha):
    """
    Compute the launch angle φ₀ in radians using Equation (17).

    Parameters
    ----------
    ve_v0 : float
        Ratio of escape velocity to initial velocity (ve / v0)
    alpha : float
        Altitude ratio (a)

    Returns
    -------
    phi_0 : float
        Launch angle in radians
    """
    if alpha <= 0:
        raise ValueError("Alpha must be positive.")

    inner = 1 - (alpha / (1 + alpha)) * (ve_v0 ** 2)
    if inner < 0.0:
        raise ValueError("Square root term is negative. No real solution.")

    rhs = (1 + alpha) * sqrt(inner)
    if rhs > 1.0:
        raise ValueError("RHS exceeds 1.0. No valid launch angle.")

    phi_0 = arcsin(rhs)
    return phi_0
