import numpy as np
from goph419lab01.functions import sqrt, arcsin, compute_launch_angle

def test_sqrt():
    print("Testing sqrt(x)...")
    for x in np.linspace(0.01, 2.5, 25):
        expected = np.sqrt(x)
        actual = sqrt(x)
        error = abs(expected - actual)
        print(f"x={x:.2f}, sqrt={actual:.8f}, error={error:.2e}")
        assert error < 1e-8

def test_arcsin():
    print("\nTesting arcsin(x)...")
    for x in np.linspace(0.01, 1.0, 25):
        expected = np.arcsin(x)
        actual = arcsin(x)
        error = abs(expected - actual)
        print(f"x={x:.2f}, arcsin={actual:.8f}, error={error:.2e}")
        assert error < 1e-8

def test_launch_angle():
    print("\nTesting compute_launch_angle()...")
    test_cases = [(0.5, 0.8), (1.0, 0.9), (0.2, 0.6)]
    for alpha, ve_v0 in test_cases:
        phi_custom = compute_launch_angle(ve_v0, alpha)
        inner = 1 - (alpha / (1 + alpha)) * (ve_v0 ** 2)
        rhs = (1 + alpha) * np.sqrt(inner)
        phi_expected = np.arcsin(rhs)
        error = abs(phi_custom - phi_expected)
        print(f"alpha={alpha}, ve/v0={ve_v0}, φ₀={phi_custom:.8f}, error={error:.2e}")
        assert error < 1e-8

if __name__ == "__main__":
    test_sqrt()
    test_arcsin()
    test_launch_angle()
